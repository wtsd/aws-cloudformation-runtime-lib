AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Turn-key VPC + ALB + ECS Fargate service for php-app-style apps.
  Creates VPC (2AZ), public/private subnets, optional NAT, ALB (HTTP/HTTPS),
  ECS cluster, ECR repo, CloudWatch Logs, IAM roles, TaskDefinition, Service,
  and target-tracking autoscaling.

Parameters:
  AppName:
    Type: String
    Default: php-app
    Description: Application/service name (used to name resources)
  ContainerImage:
    Type: String
    Default: ""
    Description: If UseCreatedEcrRepo=false, full image URI (e.g., 123.dkr.ecr.us-east-1.amazonaws.com/myapp:latest)
  UseCreatedEcrRepo:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
    Description: If true, creates an ECR repo and uses it as image (latest tag)
  ContainerPort:
    Type: Number
    Default: 80
    Description: Container port to expose
  DesiredCount:
    Type: Number
    Default: 2
  Cpu:
    Type: String
    AllowedValues: ["256","512","1024","2048","4096"]
    Default: "256"
    Description: Fargate CPU (match valid combos with Memory)
  Memory:
    Type: String
    AllowedValues: ["512","1024","2048","3072","4096","5120","6144","7168","8192","12288","16384","30720"]
    Default: "512"
    Description: Fargate Memory in MiB
  HealthCheckPath:
    Type: String
    Default: /health
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.10.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.11.0/24
  NatGateways:
    Type: String
    AllowedValues: ["0","1","2"]
    Default: "1"
    Description: Number of NAT Gateways to create (costs apply)
  CertificateArn:
    Type: String
    Default: ""
    Description: ACM certificate ARN for HTTPS. If empty, only HTTP (80) is created
  AllowedHttpCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR allowed to access ALB (HTTP/HTTPS). Lock down for production
  EnableServiceAutoScaling:
    Type: String
    AllowedValues: ["true","false"]
    Default: "true"
  MinCapacity:
    Type: Number
    Default: 2
  MaxCapacity:
    Type: Number
    Default: 6
  TargetCpuUtilization:
    Type: Number
    Default: 50

Conditions:
  HasNatGW1: !Or [!Equals [!Ref NatGateways, "1"], !Equals [!Ref NatGateways, "2"]]
  HasNatGW2: !Equals [!Ref NatGateways, "2"]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]
  UseCreatedRepo: !Equals [!Ref UseCreatedEcrRepo, "true"]
  DoScaling: !Equals [!Ref EnableServiceAutoScaling, "true"]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-igw"
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{Key: Name, Value: !Sub "${AppName}-public-a"}]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{Key: Name, Value: !Sub "${AppName}-public-b"}]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags: [{Key: Name, Value: !Sub "${AppName}-private-a"}]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags: [{Key: Name, Value: !Sub "${AppName}-private-b"}]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Sub "${AppName}-public-rt"}]
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EipNat1:
    Type: AWS::EC2::EIP
    Condition: HasNatGW1
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: HasNatGW1
    Properties:
      AllocationId: !GetAtt EipNat1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: [{Key: Name, Value: !Sub "${AppName}-natgw-a"}]

  EipNat2:
    Type: AWS::EC2::EIP
    Condition: HasNatGW2
    Properties:
      Domain: vpc
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: HasNatGW2
    Properties:
      AllocationId: !GetAtt EipNat2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags: [{Key: Name, Value: !Sub "${AppName}-natgw-b"}]

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Sub "${AppName}-private-rt-a"}]
  PrivateRoute1:
    Type: AWS::EC2::Route
    Condition: HasNatGW1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Sub "${AppName}-private-rt-b"}]
  PrivateRoute2:
    Type: AWS::EC2::Route
    Condition: HasNatGW2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2AssociationNat2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasNatGW2
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  PrivateSubnet2AssociationNat1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasNatGW1
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !If [HasNatGW2, !Ref "AWS::NoValue", !Ref PrivateRouteTable1]

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedHttpCidr
        - !If
          - HasCertificate
          - { IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: !Ref AllowedHttpCidr }
          - { Ref: "AWS::NoValue" }
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{Key: Name, Value: !Sub "${AppName}-alb-sg"}]

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Service ingress from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{Key: Name, Value: !Sub "${AppName}-svc-sg"}]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AppName}-alb"
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref AlbSecurityGroup]
      Type: application
      IpAddressType: ipv4

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AppName}-tg"
      VpcId: !Ref VPC
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher:
        HttpCode: "200-399"

  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Listener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates: [{CertificateArn: !Ref CertificateArn}]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AppName}"
      RetentionInDays: 14

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref AppName
      ImageScanningConfiguration: { scanOnPush: true }
      LifecyclePolicy:
        LifecyclePolicyText: |
          {{
            "rules": [ {{
              "rulePriority": 1, "description": "Keep last 10 images",
              "selection": {{"tagStatus": "any","countType": "imageCountMoreThan","countNumber": 10}},
              "action": {{"type": "expire"}}
            }} ]
          }}

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {{ Service: ecs-tasks.amazonaws.com }}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {{ Service: ecs-tasks.amazonaws.com }}
            Action: sts:AssumeRole
      Path: /

  AppAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {{ Service: application-autoscaling.amazonaws.com }}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecs-app-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AppName
      RequiresCompatibilities: [FARGATE]
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: !If [UseCreatedRepo, !Sub "${EcrRepository}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}:latest", !Ref ContainerImage]
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Essential: true

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AppName

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      EnableECSManagedTags: true
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!Ref ServiceSecurityGroup]
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LoadBalancers:
        - ContainerName: !Ref AppName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: DoScaling
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub service/{AppName}/{Service.Name}
      RoleARN: !GetAtt AppAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: DoScaling
    Properties:
      PolicyName: !Sub "${AppName}-cpu-scaling"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref TargetCpuUtilization

Outputs:
  VpcId:
    Value: !Ref VPC
  PublicSubnets:
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  PrivateSubnets:
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  AlbDnsName:
    Value: !GetAtt LoadBalancer.DNSName
  TargetGroupArn:
    Value: !Ref TargetGroup
  ClusterName:
    Value: !Ref Cluster
  ServiceName:
    Value: !GetAtt Service.Name
  EcrRepositoryUri:
    Value: !GetAtt EcrRepository.RepositoryUri
